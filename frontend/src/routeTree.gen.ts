/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginPageRouteImport } from './routes/LoginPage'
import { Route as KioskPageRouteImport } from './routes/KioskPage'
import { Route as HomePageRouteImport } from './routes/HomePage'
import { Route as CheckInPageRouteImport } from './routes/CheckInPage'
import { Route as AdminLoginRouteImport } from './routes/AdminLogin'
import { Route as AdminRouteImport } from './routes/Admin'
import { Route as IndexRouteImport } from './routes/index'

const LoginPageRoute = LoginPageRouteImport.update({
  id: '/LoginPage',
  path: '/LoginPage',
  getParentRoute: () => rootRouteImport,
} as any)
const KioskPageRoute = KioskPageRouteImport.update({
  id: '/KioskPage',
  path: '/KioskPage',
  getParentRoute: () => rootRouteImport,
} as any)
const HomePageRoute = HomePageRouteImport.update({
  id: '/HomePage',
  path: '/HomePage',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckInPageRoute = CheckInPageRouteImport.update({
  id: '/CheckInPage',
  path: '/CheckInPage',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/AdminLogin',
  path: '/AdminLogin',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/Admin',
  path: '/Admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Admin': typeof AdminRoute
  '/AdminLogin': typeof AdminLoginRoute
  '/CheckInPage': typeof CheckInPageRoute
  '/HomePage': typeof HomePageRoute
  '/KioskPage': typeof KioskPageRoute
  '/LoginPage': typeof LoginPageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Admin': typeof AdminRoute
  '/AdminLogin': typeof AdminLoginRoute
  '/CheckInPage': typeof CheckInPageRoute
  '/HomePage': typeof HomePageRoute
  '/KioskPage': typeof KioskPageRoute
  '/LoginPage': typeof LoginPageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Admin': typeof AdminRoute
  '/AdminLogin': typeof AdminLoginRoute
  '/CheckInPage': typeof CheckInPageRoute
  '/HomePage': typeof HomePageRoute
  '/KioskPage': typeof KioskPageRoute
  '/LoginPage': typeof LoginPageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Admin'
    | '/AdminLogin'
    | '/CheckInPage'
    | '/HomePage'
    | '/KioskPage'
    | '/LoginPage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Admin'
    | '/AdminLogin'
    | '/CheckInPage'
    | '/HomePage'
    | '/KioskPage'
    | '/LoginPage'
  id:
    | '__root__'
    | '/'
    | '/Admin'
    | '/AdminLogin'
    | '/CheckInPage'
    | '/HomePage'
    | '/KioskPage'
    | '/LoginPage'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  AdminLoginRoute: typeof AdminLoginRoute
  CheckInPageRoute: typeof CheckInPageRoute
  HomePageRoute: typeof HomePageRoute
  KioskPageRoute: typeof KioskPageRoute
  LoginPageRoute: typeof LoginPageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/LoginPage': {
      id: '/LoginPage'
      path: '/LoginPage'
      fullPath: '/LoginPage'
      preLoaderRoute: typeof LoginPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/KioskPage': {
      id: '/KioskPage'
      path: '/KioskPage'
      fullPath: '/KioskPage'
      preLoaderRoute: typeof KioskPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/HomePage': {
      id: '/HomePage'
      path: '/HomePage'
      fullPath: '/HomePage'
      preLoaderRoute: typeof HomePageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CheckInPage': {
      id: '/CheckInPage'
      path: '/CheckInPage'
      fullPath: '/CheckInPage'
      preLoaderRoute: typeof CheckInPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/AdminLogin': {
      id: '/AdminLogin'
      path: '/AdminLogin'
      fullPath: '/AdminLogin'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Admin': {
      id: '/Admin'
      path: '/Admin'
      fullPath: '/Admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  AdminLoginRoute: AdminLoginRoute,
  CheckInPageRoute: CheckInPageRoute,
  HomePageRoute: HomePageRoute,
  KioskPageRoute: KioskPageRoute,
  LoginPageRoute: LoginPageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
