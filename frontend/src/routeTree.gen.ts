/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PwaOnlyErrorRouteImport } from './routes/PwaOnlyError'
import { Route as MobileAppSignInRouteImport } from './routes/MobileAppSignIn'
import { Route as MobileAppRouteImport } from './routes/MobileApp'
import { Route as IndexRouteImport } from './routes/index'

const ScannerAppLazyRouteImport = createFileRoute('/ScannerApp')()
const AdminLoginLazyRouteImport = createFileRoute('/AdminLogin')()
const AdminLazyRouteImport = createFileRoute('/Admin')()

const ScannerAppLazyRoute = ScannerAppLazyRouteImport.update({
  id: '/ScannerApp',
  path: '/ScannerApp',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/ScannerApp').then((d) => d.Route))
const AdminLoginLazyRoute = AdminLoginLazyRouteImport.update({
  id: '/AdminLogin',
  path: '/AdminLogin',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/AdminLogin').then((d) => d.Route))
const AdminLazyRoute = AdminLazyRouteImport.update({
  id: '/Admin',
  path: '/Admin',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/Admin').then((d) => d.Route))
const PwaOnlyErrorRoute = PwaOnlyErrorRouteImport.update({
  id: '/PwaOnlyError',
  path: '/PwaOnlyError',
  getParentRoute: () => rootRouteImport,
} as any)
const MobileAppSignInRoute = MobileAppSignInRouteImport.update({
  id: '/MobileAppSignIn',
  path: '/MobileAppSignIn',
  getParentRoute: () => rootRouteImport,
} as any)
const MobileAppRoute = MobileAppRouteImport.update({
  id: '/MobileApp',
  path: '/MobileApp',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/MobileApp': typeof MobileAppRoute
  '/MobileAppSignIn': typeof MobileAppSignInRoute
  '/PwaOnlyError': typeof PwaOnlyErrorRoute
  '/Admin': typeof AdminLazyRoute
  '/AdminLogin': typeof AdminLoginLazyRoute
  '/ScannerApp': typeof ScannerAppLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/MobileApp': typeof MobileAppRoute
  '/MobileAppSignIn': typeof MobileAppSignInRoute
  '/PwaOnlyError': typeof PwaOnlyErrorRoute
  '/Admin': typeof AdminLazyRoute
  '/AdminLogin': typeof AdminLoginLazyRoute
  '/ScannerApp': typeof ScannerAppLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/MobileApp': typeof MobileAppRoute
  '/MobileAppSignIn': typeof MobileAppSignInRoute
  '/PwaOnlyError': typeof PwaOnlyErrorRoute
  '/Admin': typeof AdminLazyRoute
  '/AdminLogin': typeof AdminLoginLazyRoute
  '/ScannerApp': typeof ScannerAppLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/MobileApp'
    | '/MobileAppSignIn'
    | '/PwaOnlyError'
    | '/Admin'
    | '/AdminLogin'
    | '/ScannerApp'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/MobileApp'
    | '/MobileAppSignIn'
    | '/PwaOnlyError'
    | '/Admin'
    | '/AdminLogin'
    | '/ScannerApp'
  id:
    | '__root__'
    | '/'
    | '/MobileApp'
    | '/MobileAppSignIn'
    | '/PwaOnlyError'
    | '/Admin'
    | '/AdminLogin'
    | '/ScannerApp'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MobileAppRoute: typeof MobileAppRoute
  MobileAppSignInRoute: typeof MobileAppSignInRoute
  PwaOnlyErrorRoute: typeof PwaOnlyErrorRoute
  AdminLazyRoute: typeof AdminLazyRoute
  AdminLoginLazyRoute: typeof AdminLoginLazyRoute
  ScannerAppLazyRoute: typeof ScannerAppLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ScannerApp': {
      id: '/ScannerApp'
      path: '/ScannerApp'
      fullPath: '/ScannerApp'
      preLoaderRoute: typeof ScannerAppLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/AdminLogin': {
      id: '/AdminLogin'
      path: '/AdminLogin'
      fullPath: '/AdminLogin'
      preLoaderRoute: typeof AdminLoginLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Admin': {
      id: '/Admin'
      path: '/Admin'
      fullPath: '/Admin'
      preLoaderRoute: typeof AdminLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/PwaOnlyError': {
      id: '/PwaOnlyError'
      path: '/PwaOnlyError'
      fullPath: '/PwaOnlyError'
      preLoaderRoute: typeof PwaOnlyErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/MobileAppSignIn': {
      id: '/MobileAppSignIn'
      path: '/MobileAppSignIn'
      fullPath: '/MobileAppSignIn'
      preLoaderRoute: typeof MobileAppSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/MobileApp': {
      id: '/MobileApp'
      path: '/MobileApp'
      fullPath: '/MobileApp'
      preLoaderRoute: typeof MobileAppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MobileAppRoute: MobileAppRoute,
  MobileAppSignInRoute: MobileAppSignInRoute,
  PwaOnlyErrorRoute: PwaOnlyErrorRoute,
  AdminLazyRoute: AdminLazyRoute,
  AdminLoginLazyRoute: AdminLoginLazyRoute,
  ScannerAppLazyRoute: ScannerAppLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
